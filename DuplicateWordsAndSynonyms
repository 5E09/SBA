program duplicatewordsandsynonyms;

uses
  SysUtils, StrUtils, Classes;

const
  DuplicateThreshold = 3;
  WordsToCheck: array[1..5] of string = ('Happy', 'Sad', 'Good', 'Bad', 'Cold','Hot');

type
  TWordCount = record
    Word: string;
    Count: Integer;
  end;

var
  inputFile: TextFile;
  text: string;
  words: array of string;
  wordCounts: array of TWordCount;
  i, j, k: Integer;
  synonyms: array of TStringList;

procedure InitializeSynonyms;
begin
  SetLength(synonyms, Length(WordsToCheck));
  for i := 0 to High(WordsToCheck) do
  begin
    synonyms[i] := TStringList.Create;
    synonyms[i].Sorted := True;
  end;

  // Add sample synonyms for demonstration
  synonyms[0].Add('Delighted');
  synonyms[0].Add('Cheerful');
  synonyms[1].Add('Miserable');
  synonyms[1].Add('Depressed');
  synonyms[2].Add('Excellent');
  synonyms[3].Add('Terrible');
  synonyms[4].Add('Freezing');
  synonyms[5].Add('Fevered');

end;

procedure ProcessText;
var
  word: string;
  index: Integer;
  found: Boolean;
begin
  words := SplitString(text, ' ');

  // Count word occurrences
  SetLength(wordCounts, 0);
  for i := 0 to High(words) do
  begin
    word := AnsiUpperCase(words[i]);
    index := -1;
    found := False;

    // Check if word has already been encountered
    for index := 0 to High(wordCounts) do
      if wordCounts[index].Word = word then
      begin
        found := True;
        Break;
      end;

    // Reset index if word is not found
    if not found then
      index := -1;

    // Increment count if word is already in the list
    if index >= 0 then
      Inc(wordCounts[index].Count)
    else
    begin
      // Add new word to the list
      index := Length(wordCounts);
      SetLength(wordCounts, index + 1);
      wordCounts[index].Word := word;
      wordCounts[index].Count := 1;

    end;
  end;
end;

procedure DisplayResults;
var
  wordCount: TWordCount;
  suggestions: TStringList;
begin
  writeln('Duplicate Words (occurring more than ', DuplicateThreshold, ' times):');
  for i := 0 to High(wordCounts) do
  begin
    wordCount := wordCounts[i];
    if wordCount.Count > DuplicateThreshold then
    begin
      for j := 0 to High(WordsToCheck) do
      begin
        if wordCount.Word = AnsiUpperCase(WordsToCheck[j]) then
        begin
          writeln('Word: ', wordCount.Word, ' - Count: ', wordCount.Count);
          suggestions := synonyms[j];
          if Assigned(suggestions) and (suggestions.Count > 0) then
          begin
            writeln('Synonym Suggestions:');
            for k := 0 to suggestions.Count - 1 do
              writeln('- ', suggestions[k]);
          end;
          writeln;
        end;
      end;
    end;
  end;
end;

begin
  AssignFile(inputFile, 'hello.txt');
  Reset(inputFile);

  // Read the contents of the file
  while not EOF(inputFile) do
  begin
    ReadLn(inputFile, text);
    ProcessText;
  end;

  CloseFile(inputFile);

  InitializeSynonyms;
  DisplayResults;

  // Free synonym lists
  for i := 0 to High(synonyms) do
    synonyms[i].Free;

  ReadLn;
end.
